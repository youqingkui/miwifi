// Generated by CoffeeScript 1.8.0
(function() {
  var Check, addDevices, async, c, getToken, redis, request;

  request = require('request');

  redis = require('./redis');

  getToken = require('./redis_fun').getToken;

  addDevices = require('./redis_fun').addDevices;

  async = require('async');

  Check = (function() {
    function Check() {
      this.url = "https://www.gorouter.info/api-third-party/service/datacenter/get_connected_device?deviceId=8fb7d088-05f8-473d-8a85-509e59cc4541&appId=2882303761517367072&clientId=2882303761517367072&";
    }

    Check.prototype.getDevices = function() {
      var self;
      self = this;
      return async.waterfall([
        function(callback) {
          return getToken(function(err, token) {
            if (err) {
              return console.log(err);
            }
            return callback(null, token);
          });
        }, function(token, callback) {
          self.url += token.slice(7);
          console.log(self.url);
          return request.get(self.url, function(err, res, body) {
            var data;
            data = JSON.parse(body);
            console.log(data);
            return callback(null, data);
          });
        }, function(data, callback) {
          var devices, i, tmp, _i, _len, _ref;
          devices = [];
          _ref = data.list;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            tmp = {};
            tmp.ip = i.ip;
            tmp.mac = i.mac;
            tmp.origin_name = i.origin_name;
            devices.push(tmp);
          }
          return redis.exists("miwifi_devices", function(err, res) {
            if (err) {
              return console.log(err);
            }
            console.log("res =====>", res);
            if (!res) {
              return addDevices(devices, function(err, res) {
                if (err) {
                  return console.log(err);
                }
              });
            }
          });
        }
      ]);
    };

    return Check;

  })();

  c = new Check();

  c.getDevices();

}).call(this);

//# sourceMappingURL=check.js.map
